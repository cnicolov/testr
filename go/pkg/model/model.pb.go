// Code generated by protoc-gen-go.
// source: pkg/model/model.proto
// DO NOT EDIT!

/*
Package model is a generated protocol buffer package.

It is generated from these files:
	pkg/model/model.proto

It has these top-level messages:
	ExecutionKey
	Execution
	Artifact
	ErrorInfo
	JobData
	Step
	MultiStep
	ScriptStep
	FetchCodeStep
	StepEvent
	StepEventError
	StartStepEvent
	EndStepEvent
	OutputEvent
	StartCommandEvent
	EndCommandEvent
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OutputType int32

const (
	OutputType_UNKNOWN OutputType = 0
	OutputType_STDOUT  OutputType = 1
	OutputType_STDERR  OutputType = 2
)

var OutputType_name = map[int32]string{
	0: "UNKNOWN",
	1: "STDOUT",
	2: "STDERR",
}
var OutputType_value = map[string]int32{
	"UNKNOWN": 0,
	"STDOUT":  1,
	"STDERR":  2,
}

func (x OutputType) String() string {
	return proto.EnumName(OutputType_name, int32(x))
}

type ExecutionKey struct {
	Job       string `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Revision  string `protobuf:"bytes,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *ExecutionKey) Reset()         { *m = ExecutionKey{} }
func (m *ExecutionKey) String() string { return proto.CompactTextString(m) }
func (*ExecutionKey) ProtoMessage()    {}

type Execution struct {
	Key       *ExecutionKey `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Success   bool          `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	StartTime int64         `protobuf:"varint,4,opt,name=start_time" json:"startTime,omitempty"`
	EndTime   int64         `protobuf:"varint,5,opt,name=end_time" json:"endTime,omitempty"`
	Artifacts []*Artifact   `protobuf:"bytes,6,rep,name=artifacts" json:"artifacts,omitempty"`
	Error     *ErrorInfo    `protobuf:"bytes,7,opt,name=error" json:"error,omitempty"`
}

func (m *Execution) Reset()         { *m = Execution{} }
func (m *Execution) String() string { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()    {}

func (m *Execution) GetKey() *ExecutionKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Execution) GetArtifacts() []*Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

func (m *Execution) GetError() *ErrorInfo {
	if m != nil {
		return m.Error
	}
	return nil
}

type Artifact struct {
	RelativePath string `protobuf:"bytes,1,opt,name=relative_path" json:"relativePath,omitempty"`
	Size         int64  `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *Artifact) Reset()         { *m = Artifact{} }
func (m *Artifact) String() string { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()    {}

type ErrorInfo struct {
	ErrorType string `protobuf:"bytes,1,opt,name=error_type" json:"errorType,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorInfo) Reset()         { *m = ErrorInfo{} }
func (m *ErrorInfo) String() string { return proto.CompactTextString(m) }
func (*ErrorInfo) ProtoMessage()    {}

type JobData struct {
	Job      string   `protobuf:"bytes,1,opt,name=job" json:"job,omitempty"`
	Repo     string   `protobuf:"bytes,2,opt,name=repo" json:"repo,omitempty"`
	Plan     *Step    `protobuf:"bytes,3,opt,name=plan" json:"plan,omitempty"`
	Branches []string `protobuf:"bytes,4,rep,name=branches" json:"branches,omitempty"`
	IsPublic bool     `protobuf:"varint,5,opt,name=is_public" json:"isPublic,omitempty"`
}

func (m *JobData) Reset()         { *m = JobData{} }
func (m *JobData) String() string { return proto.CompactTextString(m) }
func (*JobData) ProtoMessage()    {}

func (m *JobData) GetPlan() *Step {
	if m != nil {
		return m.Plan
	}
	return nil
}

type Step struct {
	Id            int32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ScriptStep    *ScriptStep    `protobuf:"bytes,2,opt,name=script_step" json:"scriptStep,omitempty"`
	FetchCodeStep *FetchCodeStep `protobuf:"bytes,3,opt,name=fetch_code_step" json:"fetchCodeStep,omitempty"`
	MultiStep     *MultiStep     `protobuf:"bytes,4,opt,name=multi_step" json:"multiStep,omitempty"`
}

func (m *Step) Reset()         { *m = Step{} }
func (m *Step) String() string { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()    {}

func (m *Step) GetScriptStep() *ScriptStep {
	if m != nil {
		return m.ScriptStep
	}
	return nil
}

func (m *Step) GetFetchCodeStep() *FetchCodeStep {
	if m != nil {
		return m.FetchCodeStep
	}
	return nil
}

func (m *Step) GetMultiStep() *MultiStep {
	if m != nil {
		return m.MultiStep
	}
	return nil
}

type MultiStep struct {
	Steps []*Step `protobuf:"bytes,1,rep,name=steps" json:"steps,omitempty"`
}

func (m *MultiStep) Reset()         { *m = MultiStep{} }
func (m *MultiStep) String() string { return proto.CompactTextString(m) }
func (*MultiStep) ProtoMessage()    {}

func (m *MultiStep) GetSteps() []*Step {
	if m != nil {
		return m.Steps
	}
	return nil
}

type ScriptStep struct {
	Script string `protobuf:"bytes,1,opt,name=script" json:"script,omitempty"`
}

func (m *ScriptStep) Reset()         { *m = ScriptStep{} }
func (m *ScriptStep) String() string { return proto.CompactTextString(m) }
func (*ScriptStep) ProtoMessage()    {}

type FetchCodeStep struct {
	Url      string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Branch   string `protobuf:"bytes,2,opt,name=branch" json:"branch,omitempty"`
	Revision string `protobuf:"bytes,3,opt,name=revision" json:"revision,omitempty"`
}

func (m *FetchCodeStep) Reset()         { *m = FetchCodeStep{} }
func (m *FetchCodeStep) String() string { return proto.CompactTextString(m) }
func (*FetchCodeStep) ProtoMessage()    {}

type StepEvent struct {
	StepId            int32              `protobuf:"varint,1,opt,name=step_id" json:"stepId,omitempty"`
	TimestampDelta    int64              `protobuf:"varint,2,opt,name=timestamp_delta" json:"timestampDelta,omitempty"`
	StartStepEvent    *StartStepEvent    `protobuf:"bytes,3,opt,name=start_step_event" json:"startStepEvent,omitempty"`
	OutputEvent       *OutputEvent       `protobuf:"bytes,4,opt,name=output_event" json:"outputEvent,omitempty"`
	EndStepEvent      *EndStepEvent      `protobuf:"bytes,5,opt,name=end_step_event" json:"endStepEvent,omitempty"`
	Error             *StepEventError    `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	StartCommandEvent *StartCommandEvent `protobuf:"bytes,7,opt,name=start_command_event" json:"startCommandEvent,omitempty"`
	EndCommandEvent   *EndCommandEvent   `protobuf:"bytes,8,opt,name=end_command_event" json:"endCommandEvent,omitempty"`
	TimestampAbsolute int64              `protobuf:"varint,100,opt,name=timestamp_absolute" json:"timestampAbsolute,omitempty"`
}

func (m *StepEvent) Reset()         { *m = StepEvent{} }
func (m *StepEvent) String() string { return proto.CompactTextString(m) }
func (*StepEvent) ProtoMessage()    {}

func (m *StepEvent) GetStartStepEvent() *StartStepEvent {
	if m != nil {
		return m.StartStepEvent
	}
	return nil
}

func (m *StepEvent) GetOutputEvent() *OutputEvent {
	if m != nil {
		return m.OutputEvent
	}
	return nil
}

func (m *StepEvent) GetEndStepEvent() *EndStepEvent {
	if m != nil {
		return m.EndStepEvent
	}
	return nil
}

func (m *StepEvent) GetError() *StepEventError {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *StepEvent) GetStartCommandEvent() *StartCommandEvent {
	if m != nil {
		return m.StartCommandEvent
	}
	return nil
}

func (m *StepEvent) GetEndCommandEvent() *EndCommandEvent {
	if m != nil {
		return m.EndCommandEvent
	}
	return nil
}

type StepEventError struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
}

func (m *StepEventError) Reset()         { *m = StepEventError{} }
func (m *StepEventError) String() string { return proto.CompactTextString(m) }
func (*StepEventError) ProtoMessage()    {}

type StartStepEvent struct {
	Step *Step `protobuf:"bytes,1,opt,name=step" json:"step,omitempty"`
}

func (m *StartStepEvent) Reset()         { *m = StartStepEvent{} }
func (m *StartStepEvent) String() string { return proto.CompactTextString(m) }
func (*StartStepEvent) ProtoMessage()    {}

func (m *StartStepEvent) GetStep() *Step {
	if m != nil {
		return m.Step
	}
	return nil
}

type EndStepEvent struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *EndStepEvent) Reset()         { *m = EndStepEvent{} }
func (m *EndStepEvent) String() string { return proto.CompactTextString(m) }
func (*EndStepEvent) ProtoMessage()    {}

type OutputEvent struct {
	OutputType OutputType `protobuf:"varint,1,opt,name=output_type,enum=model.OutputType" json:"outputType,omitempty"`
	Message    string     `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *OutputEvent) Reset()         { *m = OutputEvent{} }
func (m *OutputEvent) String() string { return proto.CompactTextString(m) }
func (*OutputEvent) ProtoMessage()    {}

type StartCommandEvent struct {
	Description string   `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	Command     []string `protobuf:"bytes,2,rep,name=command" json:"command,omitempty"`
}

func (m *StartCommandEvent) Reset()         { *m = StartCommandEvent{} }
func (m *StartCommandEvent) String() string { return proto.CompactTextString(m) }
func (*StartCommandEvent) ProtoMessage()    {}

type EndCommandEvent struct {
	ExitCode int32 `protobuf:"varint,1,opt,name=ExitCode" json:"exitCode,omitempty"`
}

func (m *EndCommandEvent) Reset()         { *m = EndCommandEvent{} }
func (m *EndCommandEvent) String() string { return proto.CompactTextString(m) }
func (*EndCommandEvent) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("model.OutputType", OutputType_name, OutputType_value)
}
